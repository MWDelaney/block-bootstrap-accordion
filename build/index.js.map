{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/accordion-collapse.js","webpack:///./src/accordion-heading.js","webpack:///./src/accordion-item.js","webpack:///./src/accordion-wrapper.js","webpack:///./src/index.js","webpack:///external {\"this\":[\"wp\",\"blockEditor\"]}","webpack:///external {\"this\":[\"wp\",\"blocks\"]}","webpack:///external {\"this\":[\"wp\",\"components\"]}","webpack:///external {\"this\":[\"wp\",\"element\"]}","webpack:///external {\"this\":[\"wp\",\"i18n\"]}"],"names":["registerBlockType","title","__","description","category","icon","supports","html","attributes","parentId","type","itemId","show","parent","edit","save","props","TEMPLATE","level","placeholder","wp","data","select","dispatch","default","clientId","setAttributes","value","getBlocksByClientId","innerBlocks","forEach","block","updateBlockAttributes","ALLOWED_BLOCKS"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nimport { registerBlockType } from '@wordpress/blocks';\nimport { InnerBlocks } from '@wordpress/block-editor';\n\n/**\n * Retrieves the translation of text.\n *\n * @see https://developer.wordpress.org/block-editor/packages/packages-i18n/\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nregisterBlockType( 'create-block/accordion-collapse', {\n\t/**\n\t * This is the display title for your block, which can be translated with `i18n` functions.\n\t * The block inserter will show this name.\n\t */\n\ttitle: __( 'Accordion Collapse', 'create-block' ),\n\n\t/**\n\t * This is a short description for your block, can be translated with `i18n` functions.\n\t * It will be shown in the Block Tab in the Settings Sidebar.\n\t */\n\tdescription: __(\n\t\t'',\n\t\t'create-block'\n\t),\n\n\t/**\n\t * Blocks are grouped into categories to help users browse and discover them.\n\t * The categories provided by core are `common`, `embed`, `formatting`, `layout` and `widgets`.\n\t */\n\tcategory: 'common',\n\n\t/**\n\t * An icon property should be specified to make it easier to identify a block.\n\t * These can be any of WordPress’ Dashicons, or a custom svg element.\n\t */\n\ticon: 'minus',\n\n\t/**\n\t * Optional block extended support features.\n\t */\n\tsupports: {\n\t\t// Removes support for an HTML mode.\n\t\thtml: false,\n  },\n  attributes: {\n    parentId: {\n      type: \"string\"\n    },\n    itemId: {\n      type: \"string\"\n    },\n    show: {\n      type: \"boolean\"\n    }\n  },\n\n  parent: ['create-block/accordion-item'],\n\n\t/**\n\t * The edit function describes the structure of your block in the context of the editor.\n\t * This represents what the editor will render when the block is used.\n\t *\n\t * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#edit\n\t *\n\t * @param {Object} [props] Properties passed from the editor.\n\t *\n\t * @return {WPElement} Element to render.\n\t */\n\tedit() {\n\t\treturn (\n        <div className=\"card-body\">\n          <InnerBlocks\n            templateLock={ false }\n          />\n        </div>\n\t\t);\n\t},\n\n\t/**\n\t * The save function defines the way in which the different attributes should be combined\n\t * into the final markup, which is then serialized by the block editor into `post_content`.\n\t *\n\t * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#save\n\t *\n\t * @return {WPElement} Element to render.\n\t */\n\tsave( props ) {\n\t\treturn (\n      <div id={ \"collapse-\" + props.attributes.itemId } className={(props.attributes.show) ? \"collapse show\" : \"collapse\" } aria-labelledby={ \"heading-\" + props.attributes.itemId } data-parent={ \"#accordion-\" + props.attributes.parentId }>\n        <div className=\"card-body\">\n          <InnerBlocks.Content />\n        </div>\n      </div>\n\t\t);\n\t},\n} );\n","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nimport { registerBlockType } from '@wordpress/blocks';\nimport { InnerBlocks } from '@wordpress/block-editor';\n\n/**\n * Retrieves the translation of text.\n *\n * @see https://developer.wordpress.org/block-editor/packages/packages-i18n/\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nregisterBlockType( 'create-block/accordion-heading', {\n\t/**\n\t * This is the display title for your block, which can be translated with `i18n` functions.\n\t * The block inserter will show this name.\n\t */\n\ttitle: __( 'Accordion Heading', 'create-block' ),\n\n\t/**\n\t * This is a short description for your block, can be translated with `i18n` functions.\n\t * It will be shown in the Block Tab in the Settings Sidebar.\n\t */\n\tdescription: __(\n\t\t'',\n\t\t'create-block'\n\t),\n\n\t/**\n\t * Blocks are grouped into categories to help users browse and discover them.\n\t * The categories provided by core are `common`, `embed`, `formatting`, `layout` and `widgets`.\n\t */\n\tcategory: 'common',\n\n\t/**\n\t * An icon property should be specified to make it easier to identify a block.\n\t * These can be any of WordPress’ Dashicons, or a custom svg element.\n\t */\n\ticon: 'minus',\n\n\t/**\n\t * Optional block extended support features.\n\t */\n\tsupports: {\n\t\t// Removes support for an HTML mode.\n\t\thtml: false,\n  },\n  attributes: {\n    itemId: {\n      type: \"string\"\n    },\n    show: {\n      type: \"boolean\"\n    },\n  },\n\n  parent: ['create-block/accordion-item'],\n\n\t/**\n\t * The edit function describes the structure of your block in the context of the editor.\n\t * This represents what the editor will render when the block is used.\n\t *\n\t * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#edit\n\t *\n\t * @param {Object} [props] Properties passed from the editor.\n\t *\n\t * @return {WPElement} Element to render.\n\t */\n\tedit() {\n\n    const TEMPLATE = [\n      [ 'core/heading', { level: 4,  placeholder: \"Write accordion item heading\" } ]\n    ];\n\n\t\treturn (\n      <div className=\"card-header\">\n        <InnerBlocks\n          template={ TEMPLATE }\n          templateLock='true'\n        />\n      </div>\n\t\t);\n\t},\n\n\t/**\n\t * The save function defines the way in which the different attributes should be combined\n\t * into the final markup, which is then serialized by the block editor into `post_content`.\n\t *\n\t * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#save\n\t *\n\t * @return {WPElement} Element to render.\n\t */\n\tsave( { attributes } ) {\n    return (\n      <div className=\"card-header\" id={ \"heading-\" + attributes.itemId }>\n        <button class=\"btn btn-link\" type=\"button\" data-toggle=\"collapse\" data-target={\"#collapse-\" + attributes.itemId } aria-expanded={ (attributes.show) ? \"true\" : \"false\" } aria-controls={\"collapse-\" + attributes.itemId }>\n          <InnerBlocks.Content />\n        </button>\n      </div>\n\t\t);\n\t},\n} );\n","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nimport { registerBlockType } from '@wordpress/blocks';\nimport { InnerBlocks, InspectorControls  } from '@wordpress/block-editor';\nimport {\n  PanelBody,\n  ToggleControl\n} from \"@wordpress/components\";\n\nconst { select, dispatch } = wp.data;\n\n/**\n * Retrieves the translation of text.\n *\n * @see https://developer.wordpress.org/block-editor/packages/packages-i18n/\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nregisterBlockType( 'create-block/accordion-item', {\n\t/**\n\t * This is the display title for your block, which can be translated with `i18n` functions.\n\t * The block inserter will show this name.\n\t */\n\ttitle: __( 'Accordion Item', 'create-block' ),\n\n\t/**\n\t * This is a short description for your block, can be translated with `i18n` functions.\n\t * It will be shown in the Block Tab in the Settings Sidebar.\n\t */\n\tdescription: __(\n\t\t'Individual accordion item.',\n\t\t'create-block'\n\t),\n\n\t/**\n\t * Blocks are grouped into categories to help users browse and discover them.\n\t * The categories provided by core are `common`, `embed`, `formatting`, `layout` and `widgets`.\n\t */\n\tcategory: 'common',\n\n\t/**\n\t * An icon property should be specified to make it easier to identify a block.\n\t * These can be any of WordPress’ Dashicons, or a custom svg element.\n\t */\n\ticon: 'minus',\n\n\t/**\n\t * Optional block extended support features.\n\t */\n\tsupports: {\n\t\t// Removes support for an HTML mode.\n\t\thtml: false,\n  },\n  attributes: {\n    parentId: {\n      type: \"string\"\n    },\n    show: {\n      type: \"boolean\",\n      default: 0\n    }\n  },\n\n  parent: ['create-block/accordion'],\n\n\t/**\n\t * The edit function describes the structure of your block in the context of the editor.\n\t * This represents what the editor will render when the block is used.\n\t *\n\t * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#edit\n\t *\n\t * @param {Object} [props] Properties passed from the editor.\n\t *\n\t * @return {WPElement} Element to render.\n\t */\n\tedit( props ) {\n\n    const { clientId, attributes, setAttributes } = props;\n\n    const TEMPLATE = [\n      [ 'create-block/accordion-heading', { itemId: props.clientId } ],\n      [ 'create-block/accordion-collapse', {\n          parentId: props.attributes.parentId,\n          itemId: props.clientId,\n      } ]\n    ];\n\n\n\t\treturn (\n      <div className=\"card\">\n        <InspectorControls>\n          <PanelBody title=\"Collapse Configuration\" icon=\"\" initialOpen={true}>\n            <ToggleControl\n              label=\"Initially open\"\n              help={\n                attributes.show\n                  ? \"Item will be open when the page loads.\"\n                  : \"Image will be closed when the page loads.\"\n              }\n              checked={attributes.show}\n              onChange={value => {\n                setAttributes({ show: value });\n                select('core/editor').getBlocksByClientId(clientId)[0].innerBlocks.forEach(function (block) {\n                  dispatch('core/editor').updateBlockAttributes(block.clientId, { show: value })\n                })\n              }}\n            />\n          </PanelBody>\n        </InspectorControls>\n        <InnerBlocks\n          template={ TEMPLATE }\n          templateLock='all'\n        />\n      </div>\n\t\t);\n\t},\n\n\t/**\n\t * The save function defines the way in which the different attributes should be combined\n\t * into the final markup, which is then serialized by the block editor into `post_content`.\n\t *\n\t * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#save\n\t *\n\t * @return {WPElement} Element to render.\n\t */\n\tsave() {\n\t\treturn (\n      <div className=\"card\">\n\t\t\t  <InnerBlocks.Content />\n      </div>\n\t\t);\n\t},\n} );\n","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nimport { registerBlockType } from '@wordpress/blocks';\nimport { InnerBlocks } from '@wordpress/block-editor';\nconst { select, dispatch } = wp.data;\n\n/**\n * Retrieves the translation of text.\n *\n * @see https://developer.wordpress.org/block-editor/packages/packages-i18n/\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\n\nregisterBlockType( 'create-block/accordion', {\n\t/**\n\t * This is the display title for your block, which can be translated with `i18n` functions.\n\t * The block inserter will show this name.\n\t */\n\ttitle: __( 'Accordion', 'create-block' ),\n\n\t/**\n\t * This is a short description for your block, can be translated with `i18n` functions.\n\t * It will be shown in the Block Tab in the Settings Sidebar.\n\t */\n\tdescription: __(\n    'Group of collapsible \"accordion\" type items.',\n\t\t'create-block'\n\t),\n\n\t/**\n\t * Blocks are grouped into categories to help users browse and discover them.\n\t * The categories provided by core are `common`, `embed`, `formatting`, `layout` and `widgets`.\n\t */\n\tcategory: 'widgets',\n\n\t/**\n\t * An icon property should be specified to make it easier to identify a block.\n\t * These can be any of WordPress’ Dashicons, or a custom svg element.\n\t */\n\ticon: 'menu',\n\n\t/**\n\t * Optional block extended support features.\n\t */\n\tsupports: {\n\t\t// Removes support for an HTML mode.\n\t\thtml: false,\n  },\n\n  attributes: {\n    parentId: {\n      type: \"string\"\n    }\n  },\n\n\t/**\n\t * The edit function describes the structure of your block in the context of the editor.\n\t * This represents what the editor will render when the block is used.\n\t *\n\t * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#edit\n\t *\n\t * @param {Object} [props] Properties passed from the editor.\n\t *\n\t * @return {WPElement} Element to render.\n\t */\n\tedit( props ) {\n    const ALLOWED_BLOCKS = [ 'create-block/accordion-item' ];\n    const { clientId, setAttributes } = props\n\n    setAttributes({ parentId: props.clientId })\n\n    select('core/editor').getBlocksByClientId(clientId)[0].innerBlocks.forEach(function (block) {\n      dispatch('core/editor').updateBlockAttributes(block.clientId, { parentId: clientId })\n    })\n\n\n\n\t\treturn (\n\t\t\t<div className=\"accordion\">\n        <InnerBlocks\n          allowedBlocks={ ALLOWED_BLOCKS }\n        />\n\t\t\t</div>\n\t\t);\n\t},\n\n\t/**\n\t * The save function defines the way in which the different attributes should be combined\n\t * into the final markup, which is then serialized by the block editor into `post_content`.\n\t *\n\t * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#save\n\t *\n\t * @return {WPElement} Element to render.\n\t */\n\tsave( props ) {\n\n    return (\n\t\t\t<div className=\"accordion\" id={ \"accordion-\" + props.attributes.parentId }>\n        <InnerBlocks.Content />\n\t\t\t</div>\n\t\t);\n\t},\n} );\n","import \"./accordion-wrapper\";\nimport \"./accordion-item\";\nimport \"./accordion-heading\";\nimport \"./accordion-collapse\";\n","(function() { module.exports = this[\"wp\"][\"blockEditor\"]; }());","(function() { module.exports = this[\"wp\"][\"blocks\"]; }());","(function() { module.exports = this[\"wp\"][\"components\"]; }());","(function() { module.exports = this[\"wp\"][\"element\"]; }());","(function() { module.exports = this[\"wp\"][\"i18n\"]; }());"],"sourceRoot":""}